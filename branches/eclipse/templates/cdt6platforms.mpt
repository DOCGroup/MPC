// -*- MPC -*-
//
// Any of these platforms can be set using
//   -value_template platforms="blah blah blah"
// when generating a CDT project/workspace combo.  The default is to use the
// platform that matches the host that's running MPC (see fill_value() in
// CDT6ProjectCreator.pm).
//

//
// Platforms
//

// These will have platform_specializer appended if it's defined
configuration_parent_root = cdt.managedbuild.config.gnu
toolchain_superclass_root = cdt.managedbuild.toolchain.gnu
toolchain_internal_builder_root = cdt.managedbuild.target.gnu.builder
targetplatform_superclass = cdt.managedbuild.target.gnu.platform

linux {
  binary_parsers = org.eclipse.cdt.core.ELF
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  project_element_type_id = cdt.managedbuild.target.gnu
}

// This scope serves as an example of a custom platform.  On 64-bit linux,
// you can compile a 32-bit binary by passing -m32 to gcc.  Using this custom
// platform, MPC can generate CDT projects that have "Build Configurations"
// for both 64-bit and 32-bit.  This would be enabled by running mwc.pl with
// -value_template platforms="linux linux_m32"
linux_m32 {
  binary_parsers = org.eclipse.cdt.core.ELF
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  platform_ccflags = -m32
  platform_cxxflags = -m32
  platform_ldflags = -m32
}

macosx {
  binary_parsers = org.eclipse.cdt.core.MachO64
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  host_platform = host_macosx
  project_element_type_id = cdt.managedbuild.target.macosx
  // platform_specializer gets added on to various things like configuration_parent_root, etc.
  platform_specializer = macosx
}

win32 {
  binary_parsers = org.eclipse.cdt.core.PE
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  host_platform = host_win32
}

cygwin {
  binary_parsers = org.eclipse.cdt.core.PE
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  host_platform = host_win32
  platform_specializer = cygwin
}

solaris {
  binary_parsers = org.eclipse.cdt.core.ELF
  error_parsers = org.eclipse.cdt.core.GASErrorParser org.eclipse.cdt.core.GLDErrorParser org.eclipse.cdt.core.GCCErrorParser
  platform_specializer = solaris
}

// default values for the host-specific variables, overridden below
host_platform = linux
libenv = LD_LIBRARY_PATH
shell = sh -c // move to ProjectCreator::get_command_subs?
script_ext = .sh
script_hdr = #!/bin/sh
script_tmpfile = temporary$$.src
setenv = export
envvar_pre = $
pathsep = :

host_macosx {
  libenv = DYLD_LIBRARY_PATH
}

host_win32 {
  libenv = PATH
  shell = cmd /c
  script_ext = .cmd
  script_hdr = "@echo off & set TMPFILE=temporary%RANDOM%.src"
  script_tmpfile = %TMPFILE%
  setenv = set
  envvar_pre = %
  envvar_post = %
  pathsep = ;
  mkdir_pre = if not exist
}
