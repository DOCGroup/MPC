// -*- MPC -*-

// The *32 settings are for bcc32, *32c are for bcc32c (the clang based bcc32), and *64 are for bcc64 (also clang based)

conditional_include "common"

configurations = Debug Release
compilers = bcc32 bcc32c bcc64 bcc64x
unicode_flags = -WU
unicode_lib_modifier = u
unicode_exe_modifier = u
dll_ext = .dll
exe_ext = .exe
rc = brcc32
libflags = /C

bcc32  {
path_seperator = \\
debug_flags = -v -y -Od -vi- -k
release_flags =
optimize_flags = -O1
pdb_flags =
warn_flags = -w-rvl -w-rch -w-ccc -w-obs -w-aus -w-pia -w-inl -w-mls
stack_flag = /S:
cc = bcc32
thr_flags = -tWM
binary_flags = -tWR -tWD
lib_ext = .lib
common_defines = WIN32 _WINDOWS
common_flags = -a8
obj_ext = .obj
linker_paths = -L\"$(BDS)\lib\win32\release\" -L\"$(BDS)\lib\win32\debug\"
startup_bits = 32
link = ilink32
common_libs = ws2_32$(LIB_EXT) import32$(LIB_EXT) cw32mti$(LIB_EXT) $(CG_LIB)
platform_libs_prefix =
tlib = tlib
pch = 1
ccflags = -q
dllflags = -Tpd -Gi -x -Gn -w-dup
object_search_path = 1
exeflags = -Tpe -x -Gn
linker_dll_arguments = $(DLLFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(DLL_EXT),, $(LIBFILES),, $(RESOURCE)
linker_exe_arguments = $(EXEFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(EXE_EXT),, $(LIBFILES),, $(RESOURCE)
}

bcc32c {
path_seperator = \\
debug_flags = -Od -vi-
release_flags =
optimize_flags = -O3
pdb_flags =
warn_flags =
stack_flag = /S:
cc = bcc32c
binary_flags = -tR -tD
thr_flags = -tM
lib_ext = .lib
common_defines = WIN32 _WINDOWS
common_flags = -a8
obj_ext = .obj
linker_paths = -L\"$(BDS)\lib\win32c\debug\" -L\"$(BDS)\lib\win32c\release\"
startup_bits = 32
link = ilink32
common_libs = ws2_32$(LIB_EXT) import32$(LIB_EXT) cw32mti$(LIB_EXT)
platform_libs_prefix =
tlib = tlib
ccflags = -q
dllflags = -Tpd -Gi -x -Gn -w-dup
object_search_path = 1
exeflags = -Tpe -x -Gn
linker_dll_arguments = $(DLLFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(DLL_EXT),, $(LIBFILES),, $(RESOURCE)
linker_exe_arguments = $(EXEFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(EXE_EXT),, $(LIBFILES),, $(RESOURCE)
}

bcc64 {
path_seperator = \\
debug_flags = -g -O0
release_flags =
optimize_flags = -O3
pdb_flags =
warn_flags =
stack_flag = /S:
cc = bcc64
binary_flags = -tR -tD
thr_flags = -tM
lib_ext = .a
common_defines = WIN32 _WINDOWS WIN64
common_flags =
obj_ext = .o
linker_paths = -L\"$(BDS)\lib\win64\debug\" -L\"$(BDS)\lib\win64\release\" -GE:HIGHENTROPYVA=off
startup_bits = 64
link = ilink64
common_libs = ws2_32$(LIB_EXT) import64$(LIB_EXT) cw64mti$(LIB_EXT)
platform_libs_prefix =
tlib = tlib64
ccflags = -q
dllflags = -Tpd -Gi -x -Gn -w-dup
exeflags = -Tpe -x -Gn
object_search_path = 1
linker_dll_arguments = $(DLLFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(DLL_EXT),, $(LIBFILES),, $(RESOURCE)
linker_exe_arguments = $(EXEFLAGS) $(LFLAGS) $(STARTUP_OBJ) $(OBJFILES), $(OUTPUTDIR)$(NAME)$(EXE_EXT),, $(LIBFILES),, $(RESOURCE)
}

bcc64x {
path_seperator = \\\\
debug_flags = -g -O0
release_flags = -Wno-ignored-attributes
optimize_flags = -O3
pdb_flags = -Xlinker -pdb -Xlinker $(OUTPUTDIR)$(NAME).pdb
warn_flags =
stack_flag = --stack=
cc = bcc64x
binary_flags = -tR -tD
thr_flags = -tM
lib_ext = .lib
common_defines = WIN32 _WINDOWS WIN64
common_flags = -Qunused-arguments
obj_ext = .o
linker_paths = -L\"$(BDS)\lib\win64x\debug\" -L\"$(BDS)\lib\win64x\release\" -L\"$(BDS)\x86_64-w64-mingw32\lib\"
startup_bits = 64
ccflags = -q
link = bcc64x
common_libs = -lcrtbegin.o -lws2_32 -lmoldname -lucrt -lmingw32 -lmingwex -l\"c++\" -lunwind -lmingwthrd -l:import64$(LIB_EXT)
platform_libs_prefix = -l
dll_libs = -ldllcrt2.o
exe_libs = -lcrt2.o
tlib = tlib64
dllflags = -Xlinker -m -Xlinker i386pep -Xlinker -shared -Xlinker --Bdynamic -Xlinker --enable-auto-image-base
exeflags = -Xlinker -m -Xlinker i386pep -Xlinker --Bdynamic
object_search_path = 0
linker_dll_arguments = --driver-mode=g++ $(DLLFLAGS) $(LFLAGS) $(OBJFILES) -o $(OUTPUTDIR)$(NAME)$(DLL_EXT) -Xlinker --out-implib -Xlinker $(OUTPUTDIR)$(NAME).lib $(DLLLIBS) $(LIBFILES) $(RESOURCE)
linker_exe_arguments = --driver-mode=g++ $(EXEFLAGS) $(LFLAGS) $(OBJFILES) -o $(OUTPUTDIR)$(NAME)$(EXE_EXT) $(EXELIBS) $(LIBFILES) $(RESOURCE)
}
