cmake_minimum_required(VERSION <%cmake_minimum_required(3.12.0)%>)

<%marker(top)%>
project(<%project_name%> <%language%>)

<%if(pre_find_package)%>
<%pre_find_package%>
<%endif%>
<%if(contains(env_includes, DDS_ROOT))%>
find_package(OpenDDS REQUIRED)

<%else%>
<%if(contains(env_includes, TAO_ROOT))%>
find_package(TAO REQUIRED)

<%else%>
<%if(contains(env_includes, ACE_ROOT))%>
find_package(ACE REQUIRED)

<%else%>
<%endif%>
<%endif%>
<%endif%>
set(SOURCE_FILES <%source_files%>)
<%if(libs || lit_libs || pure_libs)%>
set(TARGET_LINK_LIBRARIES<%if(libs)%> <%foreach(configurations)%><%fornotfirst("                          ")%>$<$<CONFIG:<%configuration%>>:<%foreach(libs)%><%fornotfirst(" ")%><%lib%><%lib_modifier%><%endfor%>><%fornotlast("
")%><%endfor%><%endif%><%if(lit_libs)%> <%lit_libs%><%endif%><%if(pure_libs)%> <%pure_libs%><%endif%>)
<%endif%>
set(PROJECT_TARGET <%if(exename)%><%exename%><%else%><%if(sharedname)%><%sharedname%><%else%><%if(staticname)%><%staticname%><%else%><%project_name%><%endif%><%endif%><%endif%>)
<%marker(macros)%>

<%if(libout)%>
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <%env_libout%>)
<%endif%>
<%if(dllout || libout)%>
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY <%if(dllout)%><%env_dllout%><%else%><%env_libout%><%endif%>)
<%endif%>
<%if(exeout)%>
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY <%env_exeout%>)
<%endif%>

<%if(compile_flags)%>
add_compile_options(<%compile_flags%>)

<%endif%>
<%if(exename)%>
add_executable(${PROJECT_TARGET} ${SOURCE_FILES})
target_link_libraries(${PROJECT_TARGET} ${TARGET_LINK_LIBRARIES})
<%else%>
<%if(sharedname)%>
add_library(${PROJECT_TARGET} SHARED ${SOURCE_FILES})
add_compile_definitions(<%dynamicflags%>)
target_link_libraries(${PROJECT_TARGET} ${TARGET_LINK_LIBRARIES})
<%else%>
<%if(staticname)%>
add_library(${PROJECT_TARGET} ${SOURCE_FILES})
add_compile_definitions(<%staticflags%>)
<%endif%>
<%endif%>
<%endif%>

<%if(includes)%>
target_include_directories(${PROJECT_TARGET} PUBLIC <%env_includes%>)

<%endif%>
<%if(libpaths)%>
target_link_directories(${PROJECT_TARGET} PUBLIC <%env_libpaths%>)

<%endif%>
<%if(macros)%>
add_compile_definitions(<%macros%>)

<%endif%>
<%if(custom_types)%>
<%foreach(custom_types)%>
<%if(custom_type->input_files)%>
<%if(custom_type->command)%>

include(<%custom_type%> OPTIONAL)
<%foreach(custom_type->input_files)%>
<%uc(custom_type)%>_TARGET_SOURCES(
    ${PROJECT_TARGET} PUBLIC <%custom_type->input_file%>
    <%uc(custom_type)%>_OPTIONS <%if(flag_overrides(custom_type->input_file, commandflags))%><%flag_overrides(custom_type->input_file, commandflags)%><%else%><%custom_type->commandflags%><%endif%><%if(custom_type->output_option)%> <%custom_type->output_option%> <%if(flag_overrides(custom_type->input_file, gendir))%><%flag_overrides(custom_type->input_file, gendir)%>/<%basename(custom_type->input_file->output_file)%><%else%><%custom_type->input_file->output_file%><%endif%><%endif%>)

<%endfor%>
<%else%>
<%foreach(custom_type->input_files)%>
<%if(custom_type->input_file->commands)%>
<%if(forfirst)%>
include(<%custom_type%> OPTIONAL)
<%endif%>
<%uc(custom_type)%>_TARGET_SOURCES(
    ${PROJECT_TARGET} PUBLIC <%custom_type->input_file%>
<%foreach(custom_type->input_file->commands)%>
    <%uc(custom_type->input_file->command->type)%>_OPTIONS <%custom_type->input_file->command->flags%><%fornotlast("
")%><%endfor%>)

<%endif%>
<%endfor%>
<%endif%>
<%endif%>
<%endfor%>
<%endif%>

<%marker(local)%>
<%marker(bottom)%>
